#! /bin/bash

#Generate certificates

echo '${capem}' > ca.pem
echo '${kubernetespem}' > kubernetes.pem
echo '${kuberneteskeypem}' > kubernetes-key.pem
echo '${kubeletpem}' > kubelet.pem
echo '${kubeletkeypem}' > kubelet-key.pem


mkdir /etc/etcd/
cp ca.pem /etc/etcd/ca.pem
cp kubernetes.pem /etc/etcd/kubernetes.pem
cp kubernetes-key.pem /etc/etcd/kubernetes-key.pem

#Install etcd
wget https://github.com/coreos/etcd/releases/download/v${etcd_version}/etcd-v${etcd_version}-linux-amd64.tar.gz
tar xzvf etcd-v${etcd_version}-linux-amd64.tar.gz 
sudo cp etcd-v${etcd_version}-linux-amd64/etcd* /usr/bin/
sudo mkdir -p /var/lib/etcd

mkdir /var/lib/etcd/

#Create etcd systemd

cat > etcd.service <<"EOF"
[Unit]
Description=etcd
Documentation=https://github.com/coreos

[Service]
ExecStart=/usr/bin/etcd --name ${hostname} \
  --cert-file=/etc/etcd/kubernetes.pem \
  --key-file=/etc/etcd/kubernetes-key.pem \
  --peer-cert-file=/etc/etcd/kubernetes.pem \
  --peer-key-file=/etc/etcd/kubernetes-key.pem \
  --trusted-ca-file=/etc/etcd/ca.pem \
  --peer-trusted-ca-file=/etc/etcd/ca.pem \
  --initial-advertise-peer-urls https://${internal_ip}:2380 \
  --listen-peer-urls https://${internal_ip}:2380 \
  --listen-client-urls https://${internal_ip}:2379,http://127.0.0.1:2379 \
  --advertise-client-urls https://${internal_ip}:2379 \
  --initial-cluster-token etcd-cluster-0 \
  --initial-cluster ${etcd_ips} \
  --initial-cluster-state new \
  --data-dir=/var/lib/etcd
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

sudo mv etcd.service /etc/systemd/system/etcd.service

#Start services
sudo systemctl daemon-reload
sudo systemctl enable etcd
sudo systemctl start etcd

etcdctl --ca-file=/etc/etcd/ca.pem --cert-file=/etc/etcd/kubernetes.pem --key-file=/etc/etcd/kubernetes-key.pem set /coreos.com/network/config '{ "Network": "${cluster_cidr}", "Backend": {"Type": "${flannel_backend}"}}'


mkdir /var/lib/kubernetes
mv ca.pem /var/lib/kubernetes/ca.pem
mv kubernetes.pem /var/lib/kubernetes/kubernetes.pem
mv kubernetes-key.pem /var/lib/kubernetes/kubernetes-key.pem
mv kubelet.pem /var/lib/kubernetes/kubelet.pem
mv kubelet-key.pem /var/lib/kubernetes/kubelet-key.pem

#Create gce.conf
cat > gce.conf <<EOF
[Global]
project-id=${project_id}
network-name=${network_name}
node-tags=${tags}
node-instance-prefix=${base_instance_name}
EOF

sudo mv gce.conf /var/lib/kubernetes/gce.conf

#Create token.csv
cat > token.csv <<EOF
${scheduler_token},scheduler,scheduler
${kubelet_token},kubelet,kubelet
${controller_token},controller,controller
EOF

mv token.csv /var/lib/kubernetes/token.csv

#Create auth policy
cat > authorization-policy.jsonl<<EOF
${auth_policy}
EOF

mv authorization-policy.jsonl /var/lib/kubernetes/authorization-policy.jsonl

#Create scheduler kubeconfig
cat > kubeconfig <<EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /var/lib/kubernetes/ca.pem
    server: https://${internal_ip}:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: scheduler
  name: scheduler
current-context: scheduler
users:
- name: scheduler
  user:
    token: ${scheduler_token}
EOF

mkdir /var/lib/scheduler
sudo mv kubeconfig /var/lib/scheduler/kubeconfig

#Create controller kubeconfig
cat > kubeconfig <<EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /var/lib/kubernetes/ca.pem
    server: https://${internal_ip}:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: controller
  name: controller
current-context: controller
users:
- name: controller
  user:
    token: ${controller_token}
EOF

mkdir /var/lib/controller
sudo mv kubeconfig /var/lib/controller/kubeconfig

#Install Kubernetes master binary
wget https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/linux/amd64/kube-apiserver
wget https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/linux/amd64/kube-controller-manager
wget https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/linux/amd64/kube-scheduler
wget https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/linux/amd64/kubectl

chmod +x kube-apiserver kube-controller-manager kube-scheduler kubectl
sudo mv kube-apiserver kube-controller-manager kube-scheduler kubectl /usr/bin/

#Create master systemd
cat > kube-apiserver.service <<EOF
[Unit]
Description=Kubernetes API Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
ExecStart=/usr/bin/kube-apiserver \
  --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds \
  --advertise-address=${internal_ip} \
  --allow-privileged=true \
  --apiserver-count=${num_master} \
  --authorization-mode=RBAC,ABAC \
  --authorization-policy-file=/var/lib/kubernetes/authorization-policy.jsonl \
  --bind-address=0.0.0.0 \
  --cloud-provider=gce \
  --cloud-config=/var/lib/kubernetes/gce.conf \
  --client-ca-file=/var/lib/kubernetes/ca.pem \
  --enable-swagger-ui=true \
  --etcd-quorum-read=true \
  --etcd-cafile=/var/lib/kubernetes/ca.pem \
  --etcd-servers=${etcd_endpoints} \
  --service-account-key-file=/var/lib/kubernetes/kubernetes-key.pem \
  --service-cluster-ip-range=${svc_cluster_ip_range} \
  --service-node-port-range=${svc_node_port_range} \
  --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
  --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
  --token-auth-file=/var/lib/kubernetes/token.csv \
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat > kube-controller-manager.service <<EOF
[Unit]
Description=Kubernetes Controller Manager
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
ExecStart=/usr/bin/kube-controller-manager \
  --allocate-node-cidrs=true \
  --cluster-cidr=${cluster_cidr} \
  --cluster-name=kubernetes \
  --cloud-provider=gce \
  --cloud-config=/var/lib/kubernetes/gce.conf \
  --leader-elect=true \
  --kubeconfig=/var/lib/controller/kubeconfig \
  --root-ca-file=/var/lib/kubernetes/ca.pem \
  --service-account-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
  --service-cluster-ip-range=${svc_cluster_ip_range} \
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat > kube-scheduler.service <<EOF
[Unit]
Description=Kubernetes Scheduler
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
ExecStart=/usr/bin/kube-scheduler \
  --leader-elect=true \
  --kubeconfig=/var/lib/scheduler/kubeconfig \
  --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

mv kube-apiserver.service /etc/systemd/system/kube-apiserver.service
mv kube-controller-manager.service /etc/systemd/system/kube-controller-manager.service
mv kube-scheduler.service /etc/systemd/system/kube-scheduler.service

#Start services
sudo systemctl daemon-reload
sudo systemctl enable kube-apiserver
sudo systemctl enable kube-controller-manager
sudo systemctl enable kube-scheduler
sudo systemctl start kube-apiserver
sudo systemctl start kube-controller-manager
sudo systemctl start kube-scheduler


#Install Flanneld
wget https://github.com/coreos/flannel/releases/download/v${flannel_version}/flannel-v${flannel_version}-linux-amd64.tar.gz
tar -xf flannel-v${flannel_version}-linux-amd64.tar.gz
chmod +x flanneld
sudo mv flanneld /usr/bin/flanneld

#Install Docker
wget https://get.docker.com/builds/Linux/x86_64/docker-${docker_version}.tgz
tar -xf docker-${docker_version}.tgz
sudo cp docker/docker* /usr/bin/


#Install Kubelet
wget https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/linux/amd64/kubelet
chmod +x kubelet
sudo mv kubelet /usr/bin/kubelet


#Install Kube-proxy
wget https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/linux/amd64/kube-proxy
chmod +x kube-proxy
sudo mv kube-proxy /usr/bin/kube-proxy

#Create gce.conf
cat > gce.conf <<EOF
[Global]
project-id=${project_id}
network-name=${network_name}
node-tags=${tags}
node-instance-prefix=${base_instance_name}
EOF

sudo mv gce.conf /var/lib/kubernetes/gce.conf

#Create kubeconfig
cat > kubeconfig <<EOF
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /var/lib/kubernetes/ca.pem
    server: https://${master_lb_ip}:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubelet
  name: kubelet
current-context: kubelet
users:
- name: kubelet
  user:
    token: ${kubelet_token}
EOF

sudo mkdir /var/lib/kubelet
sudo mv kubeconfig /var/lib/kubelet/kubeconfig

#Create systemd files

cat > flannel.service <<EOF
[Unit]
Description=Flannel
Documentation=https://github.com/coreos/flannel

[Service]
ExecStart=/usr/bin/flanneld --etcd-endpoints=${etcd_endpoints} \\
  --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
  --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
  --etcd-cafile=/var/lib/kubernetes/ca.pem \\
  --ip-masq=true

Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat > docker.service <<EOF
[Unit]
Description=Docker Application Container Engine
Documentation=http://docs.docker.io
After=flannel.service
Requires=flannel.service

[Service]
EnvironmentFile=/run/flannel/subnet.env
ExecStart=/usr/bin/docker daemon --bip=\$${FLANNEL_SUBNET} --mtu=\$${FLANNEL_MTU}  --iptables=false   --ip-masq=false   --host=unix:///var/run/docker.sock   --log-level=error   --storage-driver=overlay
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat > kubelet.service <<EOF
[Unit]
Description=Kubernetes Kubelet
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
ExecStart=/usr/bin/sudo /usr/bin/kubelet --allow-privileged=true  --require-kubeconfig=true --register-node=true --cloud-provider=gce --cloud-config=/var/lib/kubernetes/gce.conf --cluster-dns=${cluster_dns}   --cluster-domain=${cluster_domain}   --container-runtime=docker   --docker=unix:///var/run/docker.sock   --kubeconfig=/var/lib/kubelet/kubeconfig   --serialize-image-pulls=false --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

cat > kube-proxy.service <<EOF
[Unit]
[Unit]
Description=Kubernetes Kube Proxy
Documentation=https://github.com/GoogleCloudPlatform/kubernetes

[Service]
ExecStart=/usr/bin/kube-proxy   --cluster-cidr=${cluster_cidr}   --kubeconfig=/var/lib/kubelet/kubeconfig   --proxy-mode=iptables   --v=2
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

sudo mv flannel.service /etc/systemd/system/flannel.service
sudo mv docker.service /etc/systemd/system/docker.service
sudo mv kubelet.service /etc/systemd/system/kubelet.service
sudo mv kube-proxy.service /etc/systemd/system/kube-proxy.service

#Start services
sudo systemctl daemon-reload
sudo systemctl enable flannel
sudo systemctl enable docker
sudo systemctl enable kubelet
sudo systemctl enable kube-proxy
sudo systemctl start flannel
sudo systemctl start docker
sudo systemctl start kubelet
sudo systemctl start kube-proxy

sleep 10s

#Deploy addons
kubectl label nodes $$(hostname -s) node=master
kubectl taint nodes $$(hostname -s) node=master:NoSchedule

mkdir /tmp/addons
cat > /tmp/addons/kubedns.yaml<<EOF
${kubedns}
EOF
cat > /tmp/addons/kubedashboard.yaml<<EOF
${kubedashboard}
EOF
cat > /tmp/addons/ca-controller.yaml<<EOF
${ca-controller}
EOF
cat > /tmp/addons/default.yaml<<EOF
${storageclass}
EOF
cat > /tmp/addons/grafana.yaml<<EOF
${grafana}
EOF
cat > /tmp/addons/influxdb.yaml<<EOF
${influxdb}
EOF
cat > /tmp/addons/heapster.yaml<<EOF
${heapster}
EOF
kubectl apply -f /tmp/addons/